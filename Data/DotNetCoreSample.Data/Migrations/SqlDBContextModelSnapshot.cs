// <auto-generated />
using System;
using AuthService.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthService.Data.Migrations
{
    [DbContext(typeof(SqlDBContext))]
    partial class SqlDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AuthService.Models.DBModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BannerUri")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BloctoWalletAddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLoginFirstTime")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PasswordChangeRequired")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d41c9419-991b-4088-af60-c5a099ef5877",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ClientId = "402d6579-043a-40b6-bd45-fc63854769ec",
                            ConcurrencyStamp = "7939eb08-e4c9-4ee5-9e89-4fc923ce45ac",
                            CreateDate = new DateTime(2023, 1, 27, 8, 31, 44, 937, DateTimeKind.Utc).AddTicks(1641),
                            Email = "noumankhan@troontechnologies.com",
                            EmailConfirmed = true,
                            FirstName = "Nouman",
                            LastName = "Khan",
                            LockoutEnabled = false,
                            Mobile = "",
                            NormalizedEmail = "SUPERADMIN@TROONTECHNOLOGIES.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordChangeRequired = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENGJrqoFveCpjG9VnhFC8q9dV0ZF80UFe9eyN+xIDnsm2u26QYY2z9Vcgp2Lhb+M/w==",
                            PhoneNumber = "+923335000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "3a452f25-159e-4e81-b89a-8decd96ef6e0",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "77f3cf5b-a996-4456-918a-9d527e81001f",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ClientId = "402d6579-043a-40b6-bd45-fc63854769ec",
                            ConcurrencyStamp = "4b84002d-6e3d-4090-a78d-efdf64c28869",
                            CreateDate = new DateTime(2023, 1, 27, 8, 31, 44, 937, DateTimeKind.Utc).AddTicks(3076),
                            Email = "usmanmanzoor@troontechnologies.com",
                            EmailConfirmed = true,
                            FirstName = "Muhammad",
                            LastName = "Usman",
                            LockoutEnabled = false,
                            Mobile = "",
                            NormalizedEmail = "usmanmanzoor@troontechnologies.com",
                            NormalizedUserName = "usmanmanzoor@troontechnologies.com",
                            PasswordChangeRequired = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDY1Z/QeVYTeZ3l9UgLxM7XVKeXgkAGkCi5ZUMR+RhLzatCqoSviIZVPbhU/0hfw1A==",
                            PhoneNumber = "+923335000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "95451985-4f76-42c8-9a5c-ef4800980360",
                            TwoFactorEnabled = false,
                            UserName = "usmanmanzoor@troontechnologies.com"
                        },
                        new
                        {
                            Id = "5ebd51ea-d6d2-43cf-82b5-b08395cfcb40",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ClientId = "402d6579-043a-40b6-bd45-fc63854769ec",
                            ConcurrencyStamp = "064c8667-a56e-404b-bdbc-a9d4dcdcd0b2",
                            CreateDate = new DateTime(2023, 1, 27, 8, 31, 44, 937, DateTimeKind.Utc).AddTicks(4352),
                            Email = "paul@troontechnologies.com",
                            EmailConfirmed = true,
                            FirstName = "Paul",
                            LastName = "Dube",
                            LockoutEnabled = false,
                            Mobile = "",
                            NormalizedEmail = "paul@troontechnologies.com",
                            NormalizedUserName = "paul@troontechnologies.com",
                            PasswordChangeRequired = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDY1Z/QeVYTeZ3l9UgLxM7XVKeXgkAGkCi5ZUMR+RhLzatCqoSviIZVPbhU/0hfw1A==",
                            PhoneNumber = "+923335000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4d6a8c21-6e81-41a7-aa4f-edea6e31b64c",
                            TwoFactorEnabled = false,
                            UserName = "paul@troontechnologies.com"
                        },
                        new
                        {
                            Id = "6058f09d-5d22-42dc-bded-140eee0ace72",
                            AccessFailedCount = 0,
                            Avatar = "",
                            ClientId = "402d6579-043a-40b6-bd45-fc63854769ec",
                            ConcurrencyStamp = "2d3e4f26-efb0-4fd5-a6df-f18b8934a7ee",
                            CreateDate = new DateTime(2023, 1, 27, 8, 31, 44, 937, DateTimeKind.Utc).AddTicks(5872),
                            Email = "abdullah@troontechnologies.com",
                            EmailConfirmed = true,
                            FirstName = "Adullah",
                            LastName = "Khalid",
                            LockoutEnabled = false,
                            Mobile = "",
                            NormalizedEmail = "abdullah@troontechnologies.com",
                            NormalizedUserName = "abdullah@troontechnologies.com",
                            PasswordChangeRequired = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEDY1Z/QeVYTeZ3l9UgLxM7XVKeXgkAGkCi5ZUMR+RhLzatCqoSviIZVPbhU/0hfw1A==",
                            PhoneNumber = "+923335000000",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "543135d1-9dd6-4a30-9a5a-a05b6f861eeb",
                            TwoFactorEnabled = false,
                            UserName = "abdullah@troontechnologies.com"
                        });
                });

            modelBuilder.Entity("AuthService.Models.DBModels.OAuthToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Session_id")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("access_token")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("expires_in")
                        .HasColumnType("int");

                    b.Property<string>("refresh_token")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("user_id")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OAuthTokens");
                });

            modelBuilder.Entity("AuthService.Models.DBModels.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e04364b-e9e6-4c94-9253-97a96f7ee04b",
                            ConcurrencyStamp = "cdfdbdf6-5c1b-4097-a69c-10d0b3a819b8",
                            Name = "Super Admin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "a3763094-eb71-4bb2-93a7-dd9451d3bf3c",
                            ConcurrencyStamp = "05bad7af-98ee-4667-b62c-fb1f62d1cf05",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "57e7e924-659d-4c9c-b477-117799dc3315",
                            ConcurrencyStamp = "e40dc27a-a6ee-4c2d-aa39-0ebd035c2e41",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3cf1e769-ceed-4a1e-af7d-84b5f05634f4",
                            ConcurrencyStamp = "e64d5d4c-dbdb-4345-a06a-134808bb9f18",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d41c9419-991b-4088-af60-c5a099ef5877",
                            RoleId = "2e04364b-e9e6-4c94-9253-97a96f7ee04b"
                        },
                        new
                        {
                            UserId = "77f3cf5b-a996-4456-918a-9d527e81001f",
                            RoleId = "2e04364b-e9e6-4c94-9253-97a96f7ee04b"
                        },
                        new
                        {
                            UserId = "5ebd51ea-d6d2-43cf-82b5-b08395cfcb40",
                            RoleId = "2e04364b-e9e6-4c94-9253-97a96f7ee04b"
                        },
                        new
                        {
                            UserId = "6058f09d-5d22-42dc-bded-140eee0ace72",
                            RoleId = "2e04364b-e9e6-4c94-9253-97a96f7ee04b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthService.Models.DBModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthService.Models.DBModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthService.Models.DBModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthService.Models.DBModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
